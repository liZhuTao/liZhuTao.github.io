<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>封装queryURLParams函数</title>
    <url>/2019/11/26/2019-11-26-queryURLParams-md/</url>
    <content><![CDATA[<h2 id="封装queryURLParams函数"><a href="#封装queryURLParams函数" class="headerlink" title="封装queryURLParams函数"></a>封装queryURLParams函数</h2><a id="more"></a>
<h3 id="方法一：基于数组的方法"><a href="#方法一：基于数组的方法" class="headerlink" title="方法一：基于数组的方法"></a>方法一：基于数组的方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let url = &apos;http://www.lizhutao.github.io/index.html?id=1&amp;name=lzt&amp;age=20#box&apos;;</span><br><span class="line"></span><br><span class="line">function queryURLParams(url) &#123;</span><br><span class="line">	//1.获取？后面的信息</span><br><span class="line">	let askIn = url.indexOf(&apos;?&apos;),</span><br><span class="line">		wellIn = url.lastIndexOf(&apos;#&apos;),</span><br><span class="line">		askText = &apos;&apos;,</span><br><span class="line">		wellText = &apos;&apos;;</span><br><span class="line">	//#号不存在</span><br><span class="line">	wellIn === -1 ? wellText = url.length : null;</span><br><span class="line">	//?号存在</span><br><span class="line">	askIn !== -1 ? askText = url.substring(askIn + 1, wellIn) : null;</span><br><span class="line">	wellText = url.substring(wellIn + 1);</span><br><span class="line"></span><br><span class="line">	//2.获取每一部分的信息</span><br><span class="line">	let result = &#123;&#125;;</span><br><span class="line">	//获取 HASH 值</span><br><span class="line">	wellText !== &apos;&apos; ? result[&apos;HASH&apos;] = wellText : null;</span><br><span class="line">	if (askText !== &apos;&apos;) &#123;</span><br><span class="line">		let ary = askText.split(&apos;&amp;&apos;);</span><br><span class="line">		ary.forEach(item =&gt; &#123;</span><br><span class="line">			let itemAry = item.split(&apos;=&apos;);</span><br><span class="line">			result[itemAry[0]] = itemAry[1];</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let paramObj = queryURLParams(url);</span><br><span class="line">console.log(paramObj);</span><br></pre></td></tr></table></figure>


<h3 id="方法二：基于正则表达式实现"><a href="#方法二：基于正则表达式实现" class="headerlink" title="方法二：基于正则表达式实现"></a>方法二：基于正则表达式实现</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let url = &apos;http://www.lizhutao.github.io/index.html?id=1&amp;name=lzt&amp;age=20#box&apos;;</span><br><span class="line"></span><br><span class="line">function queryURLParams(url) &#123;</span><br><span class="line">	let result = &#123;&#125;,</span><br><span class="line">		reg1 = /([^?#&amp;=]+)=([^?#&amp;=]+)/g,</span><br><span class="line">		reg2 = /#([^?#&amp;=]+)/g;</span><br><span class="line">	url.replace(reg1, (n, x, y) =&gt; result[x] = y);</span><br><span class="line">	url.replace(reg2, (n, x ) =&gt; result[&apos;HASH&apos;] = x);</span><br><span class="line">	return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let paramObj = queryURLParams(url);</span><br><span class="line">console.log(paramObj);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS函数</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>数组去重</title>
    <url>/2019/11/26/2019-11-26-%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D-md/</url>
    <content><![CDATA[<h2 id="数组去重的方法"><a href="#数组去重的方法" class="headerlink" title="数组去重的方法"></a>数组去重的方法</h2><a id="more"></a>
<h3 id="方法一：创建新数组"><a href="#方法一：创建新数组" class="headerlink" title="方法一：创建新数组"></a>方法一：创建新数组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ary = [1, 2, 3, 1, 2, 3, 1, 2, 3];</span><br><span class="line">let newAry = [];</span><br><span class="line">for (let i = 0; i &lt; ary.length; i++)&#123;</span><br><span class="line">	let item = ary[i];</span><br><span class="line">	if(newAry.includes(item))&#123;</span><br><span class="line">		continue;</span><br><span class="line">	&#125;</span><br><span class="line">	newAry.push(item);</span><br><span class="line">&#125;</span><br><span class="line">console.log(ary,newAry);</span><br><span class="line"></span><br><span class="line">//代码优化</span><br><span class="line">let ary = [1, 2, 3, 1, 2, 3, 1, 2, 3];</span><br><span class="line">let newAry = [];</span><br><span class="line">ary.forEach(item=&gt;&#123;</span><br><span class="line">	if(newAry.includes(item))	return;</span><br><span class="line">	newAry.push(item);</span><br><span class="line">&#125;)</span><br><span class="line">console.log(ary,newAry);</span><br></pre></td></tr></table></figure>

<h3 id="方法二：嵌套for循环操作原有数组"><a href="#方法二：嵌套for循环操作原有数组" class="headerlink" title="方法二：嵌套for循环操作原有数组"></a>方法二：嵌套for循环操作原有数组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ary = [1, 2, 3, 1, 2, 3, 1, 2, 3];</span><br><span class="line">for (let i = 0; i &lt; ary.length; i++) &#123;</span><br><span class="line">	let item = ary[i];</span><br><span class="line">	for (let j = i + 1; j &lt; ary.length; j++) &#123;</span><br><span class="line">		let item2 = ary[j];</span><br><span class="line">		if (item === item2)&#123;</span><br><span class="line">			ary.splice(j,1);  //数组塌陷</span><br><span class="line">			j--;          //解决数组塌陷问题</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(ary);  =&gt;//[1, 2, 3]</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 数组的splice方法在操作数组的时候会导致数组塌陷问题</p>
</blockquote>
<h3 id="方法三：新建对象比较"><a href="#方法三：新建对象比较" class="headerlink" title="方法三：新建对象比较"></a>方法三：新建对象比较</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ary = [1, 2, 3, 1, 2, 3, 1, 2, 3];</span><br><span class="line">let obj = &#123;&#125;;</span><br><span class="line">for (let i = 0; i &lt; ary.length; i++) &#123;</span><br><span class="line">	let item = ary[i];</span><br><span class="line">	if (obj[item] === item) &#123;   //或  obj[item] !== undefined</span><br><span class="line">		ary.splice(i, 1);</span><br><span class="line">		i--;</span><br><span class="line">	&#125;</span><br><span class="line">	obj[item] = item;</span><br><span class="line">&#125;</span><br><span class="line">console.log(ary);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>操作数据大时，性能不好</p>
</blockquote>
<h3 id="方法四-遇到重复项将最后一项赋值给当前项，并删除最后一项"><a href="#方法四-遇到重复项将最后一项赋值给当前项，并删除最后一项" class="headerlink" title="方法四:遇到重复项将最后一项赋值给当前项，并删除最后一项"></a>方法四:遇到重复项将最后一项赋值给当前项，并删除最后一项</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ary = [1, 2, 3, 1, 2, 3, 1, 2, 3];</span><br><span class="line">let obj = &#123;&#125;;</span><br><span class="line">for (let i = 0; i &lt; ary.length; i++) &#123;</span><br><span class="line">	let item = ary[i];</span><br><span class="line">	if (obj[item] !== undefined) &#123;  //obj中有这一项</span><br><span class="line">		ary[i] == ary[ary.length-1];</span><br><span class="line">		ary.length--;</span><br><span class="line">		i--;</span><br><span class="line">		continue;</span><br><span class="line">	&#125;</span><br><span class="line">	obj[item] = item;</span><br><span class="line">&#125;</span><br><span class="line">console.log(ary);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>操作数据比较大的时候，性能比较好；</p>
</blockquote>
<h3 id="方法五：ES6数据结构–set-方法"><a href="#方法五：ES6数据结构–set-方法" class="headerlink" title="方法五：ES6数据结构–set()方法"></a>方法五：ES6数据结构–set()方法</h3><blockquote>
<p>ES6新增的一种新的数据结构，类似于数组，但成员是唯一的且无序的，没有重复值。Set本身是一种构造函数，用来生成Set数据结构。Set对象允许你存储任何类型的唯一值，无论是原始值还是对象引用。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ary = [1, 2, 3, 1, 2, 3, 1, 2, 3];</span><br><span class="line">let ary1 = [...new Set(ary)];  //使用剩余参数转数组</span><br><span class="line">console.log(ary1);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS函数</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>formatTime</title>
    <url>/2019/11/28/2019-11-28-formatTime-md/</url>
    <content><![CDATA[<h2 id="格式化时间字符串"><a href="#格式化时间字符串" class="headerlink" title="格式化时间字符串"></a>格式化时间字符串</h2><a id="more"></a>
<h3 id="实现一个不足两位补零函数"><a href="#实现一个不足两位补零函数" class="headerlink" title="实现一个不足两位补零函数"></a>实现一个不足两位补零函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let addZero = val =&gt; &#123;</span><br><span class="line">	val = Number(val);</span><br><span class="line">	return val &lt; 10 ? &apos;0&apos; + val : val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法一：基于String方法实现"><a href="#方法一：基于String方法实现" class="headerlink" title="方法一：基于String方法实现"></a>方法一：基于String方法实现</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let time = &apos;2019-11-28 12:0:0&apos;;</span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line"> *formatTime:格式化时间字符串</span><br><span class="line"> *  @params:time</span><br><span class="line"> *      未处理的时间字符串</span><br><span class="line"> *  @return:result</span><br><span class="line"> *      格式化处理的时间字符串</span><br><span class="line"> */</span><br><span class="line">function formatTime(time) &#123;</span><br><span class="line">	//1.获取年月日等信息</span><br><span class="line">	let ary = time.split(&apos; &apos;),</span><br><span class="line">		aryLeft = ary[0].split(&apos;-&apos;),</span><br><span class="line">		aryRight = ary[1].split(&apos;:&apos;);</span><br><span class="line">	ary = aryLeft.concat(aryRight);</span><br><span class="line">	//2.拼接字符串格式</span><br><span class="line">	let result = ary[0] + &apos;年&apos; + addZero(ary[1]) + &apos;月&apos; + addZero(ary[2]) + &apos;日&apos;;</span><br><span class="line">	result += &apos; &apos; + addZero(ary[3]) + &apos;:&apos; + addZero(ary[4]) + &apos;:&apos; + addZero(ary[5]);</span><br><span class="line">	return result;</span><br><span class="line">&#125;</span><br><span class="line">let newTime = formatTime(time);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>容错性不好，当未处理的日期传入不完整时，会报错</p>
</blockquote>
<h3 id="方法二-基于时间对象处理"><a href="#方法二-基于时间对象处理" class="headerlink" title="方法二:基于时间对象处理"></a>方法二:基于时间对象处理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function formatTime(time) &#123;</span><br><span class="line">	//1.把时间字符串转化为标准日期对象</span><br><span class="line">	time = time.replace(/-/g, &apos;/&apos;);</span><br><span class="line">	time = new Date(time);</span><br><span class="line">	//基于日期对象分别获取时间信息</span><br><span class="line">	let year = time.getFullYear(),</span><br><span class="line">		month = addZero(time.getMonth() + 1),</span><br><span class="line">		day = addZero(time.getDate()),</span><br><span class="line">		hours = addZero(time.getHours()),</span><br><span class="line">		minutes = addZero(time.getMinutes()),</span><br><span class="line">		second = addZero(time.getSeconds());</span><br><span class="line">	//格式化字符串</span><br><span class="line">	return year+&apos;年&apos;+month+&apos;月&apos;+day+&apos;日&apos;+&apos; &apos;+hours+&apos;:&apos;+minutes+&apos;:&apos;+second;</span><br><span class="line">&#125;</span><br><span class="line">let newTime = formatTime(time);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>容错性好，但是输出格式固定</p>
</blockquote>
<h3 id="方法三：公用时间字符串处理"><a href="#方法三：公用时间字符串处理" class="headerlink" title="方法三：公用时间字符串处理"></a>方法三：公用时间字符串处理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String.prototype.formatTime = function formatTime(template) &#123;</span><br><span class="line">	//初始化模板</span><br><span class="line">	typeof template === &apos;undefined&apos; ? template = &quot;&#123;0&#125;年&#123;1&#125;月&#123;2&#125;日 &#123;3&#125;:&#123;4&#125;:&#123;5&#125;&quot; : null;</span><br><span class="line">	//this:要处理的字符串</span><br><span class="line">	//获取日期字符串中的数字信息</span><br><span class="line">	let matchAry = this.match(/\d+/g);</span><br><span class="line">	//模板和数据的渲染</span><br><span class="line">	template = template.replace(/\&#123;(\d+)\&#125;/g, (x, y) =&gt; &#123;</span><br><span class="line">		let val = matchAry[y] || &apos;00&apos;;</span><br><span class="line">		val.length &lt; 2 ? val = &apos;0&apos; + val : null;</span><br><span class="line">		return val;</span><br><span class="line">	&#125;);</span><br><span class="line">	return template;</span><br><span class="line">&#125;</span><br><span class="line">console.log(time.formatTime());</span><br></pre></td></tr></table></figure>
<blockquote>
<p>基于模板和数据的渲染，能够按理想格式输出</p>
</blockquote>
]]></content>
      <categories>
        <category>JS函数</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS实现冒泡、插入、快速排序</title>
    <url>/2019/12/06/2019-12-6-%E5%86%92%E6%B3%A1%E3%80%81%E6%8F%92%E5%85%A5%E3%80%81%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-md/</url>
    <content><![CDATA[<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><blockquote>
<p>它重复地走访过要排序的元素列，依次比较两个相邻的元素，如果顺序（如从大到小、首字母从从Z到A）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素列已经排序完成。</p>
</blockquote>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function bubble(ary)&#123;</span><br><span class="line">    let temp = null;</span><br><span class="line">    for(let i = 0; i &lt; ary.length-1; i++)&#123;</span><br><span class="line">        for(let j = 0; j &lt; ary.length-1-i; j++)&#123;</span><br><span class="line">            if(ary[j] &gt; ary[j+1])&#123;</span><br><span class="line">                temp = ary[j];</span><br><span class="line">                ary[j] = ary[j+1];</span><br><span class="line">                ary[j+1] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return ary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><blockquote>
<p>插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n^2)。是稳定的排序方法。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function insert(ary)&#123;</span><br><span class="line">    let newAry = [];</span><br><span class="line">    newAry.push(ary[0]);</span><br><span class="line">    for(let i = 1; i &lt; ary.length; i++)&#123;</span><br><span class="line">        let A = ary[i];</span><br><span class="line">        for(let j =newAry.length-1; j &gt;=0; j--)&#123;</span><br><span class="line">            let B = newAry[j];</span><br><span class="line">            if(A&gt;B)&#123;</span><br><span class="line">                newAry.splice(j+1,0,A);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            if(j===0)&#123;</span><br><span class="line">                newAry.unshift(A);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return newAry;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><blockquote>
<p>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function quick(ary)&#123;</span><br><span class="line">    if(ary.length&lt;=1)&#123;</span><br><span class="line">        return ary;</span><br><span class="line">    &#125;</span><br><span class="line">    let middleIndex = Math.floor(ary.length/2);</span><br><span class="line">    let middleValue = ary.splice(middleIndex,1)[0];</span><br><span class="line">    let aryLeft = [];</span><br><span class="line">    let aryRight = [];</span><br><span class="line">    for(let i = 0;i&lt;ary.length;i++)&#123;</span><br><span class="line">        let item = ary[i];</span><br><span class="line">        item &lt; middleValue ? aryLeft.push(item):aryRight.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">    return quick(aryLeft).concat(middleValue,quick(aryRight));</span><br><span class="line">&#125;</span><br><span class="line">var ary = [1,25,23,2,61,22,35,99];</span><br><span class="line">console.log(ary);</span><br><span class="line">var result = quick(ary);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>function</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery源码解读（二）</title>
    <url>/2020/02/04/2020-02-04-jQuery%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%EF%BC%88%E4%BA%8C%EF%BC%89-md/</url>
    <content><![CDATA[<h3 id="jQuery实例对象"><a href="#jQuery实例对象" class="headerlink" title="jQuery实例对象"></a>jQuery实例对象</h3><blockquote>
<p>基于JQ选择器创建出来的是JQ类的一个实例，可以调取jQuery.prototype上的方法。</p>
</blockquote>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var version =  &quot;3.4.1&quot;,</span><br><span class="line">        jQuery = function (selector,context)&#123;</span><br><span class="line">            return new jQuery.fn.init(selector,context);</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">var init = jQuery.fn.init = function(selector, context, root)&#123;</span><br><span class="line">    //......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">init.prototype = jQuery.fn;</span><br><span class="line">//</span><br></pre></td></tr></table></figure>
<blockquote>
<p>1.创建出来的JQ实例是一个类数组（JQ对象）  基于 makeArray 创建出来的</p>
</blockquote>
<blockquote>
<p>2.selector 支持三种数据格式</p>
</blockquote>
<pre><code>1. [string]
    选择器      $(&apos;.box&apos;)
    创建元素    $(&apos;&lt;div&gt;...&lt;/div&gt;&apos;)
2.[元素对象：JS原生对象]
    把原生JS对象转化为JQ对象（只有这样才能调取JQ中的方法）
        var box = document.getElementById(&quot;box&quot;);
        $(&apos;box&apos;)
    把JQ对象转化为原生JS对象，直接基于索引获取即可，例如：$A[0]
        在项目中建议使用JQ中自带的get方法实现，因为它更完善，支持负数索引$A.get(0)
        eq方法也是根据索引集合中的某一项（也支持负数），只不过返回的结果不是原生JS而是JQ的实例
3.[function]
    $(function(){})     等待页面中的DOM结构加载完毕再执行函数，等价于$(document).ready(function(){})</code></pre><h4 id="makeArray"><a href="#makeArray" class="headerlink" title="makeArray"></a>makeArray</h4><blockquote>
<p>创建一个类数组的方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">makeArray:function(arr, results)&#123;</span><br><span class="line">    var ret = results || [];</span><br><span class="line">    </span><br><span class="line">    if(arr != null)&#123;</span><br><span class="line">        if(isArrayLike(object(arr)))&#123;</span><br><span class="line">            jQuery.merge(ret,typeof arr === &quot;string&quot; ? [arr] : arr);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            push.call(ret, arr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><blockquote>
<p>$(“.box”) === $(“.box”) =&gt;false 这是两个实例,引用地址不相同</p>
</blockquote>
<pre><code>所以操作的时候不要：
    $(&quot;box&quot;).css();
    $(&quot;box&quot;).attr();
    $(&quot;box&quot;).click();
正确的操作是：
    let $box = $(&quot;box&quot;);
    $box.css();
    $box.attr();
    $box.click();</code></pre>]]></content>
      <categories>
        <category>源码</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery源码解读（三）</title>
    <url>/2020/02/06/2020-02-06-jQuery%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%EF%BC%88%E4%B8%89%EF%BC%89-md/</url>
    <content><![CDATA[<h3 id="jQuery中的extend"><a href="#jQuery中的extend" class="headerlink" title="jQuery中的extend"></a>jQuery中的extend</h3><a id="more"></a>

<blockquote>
<p>extend:向JQ中继续拓展方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jQuery.extend = jQuery.fn.extend = function()&#123;</span><br><span class="line">    //......</span><br><span class="line">&#125;;</span><br><span class="line">//调用extend</span><br><span class="line">$.extend(&#123;&#125;);       //拓展到JQ对象上：一般是为了完善类库，提供更多的工具方法。</span><br><span class="line">$.extend(true,&#123;&#125;)</span><br><span class="line"></span><br><span class="line">$.fn.extend();      //拓展到JQ原型上：一般是为了写插件，让JQ实例调用</span><br></pre></td></tr></table></figure>

<blockquote>
<p>转移$的使用权：当$与其他类库产生了冲突，执行这个方法可以转移使用权。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var _jQuery = window.jQuery,</span><br><span class="line">    _$ = window.$;</span><br><span class="line">    </span><br><span class="line">jQuery.noConflict = function(deep)&#123;</span><br><span class="line">    if(window.$ === jQuery)&#123;</span><br><span class="line">        window.$ === _$;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if(deep &amp;&amp; window.jQuery === jQuery)&#123;</span><br><span class="line">        window.jQuery = _jQuery;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return jQuery;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//转移使用权的调用方法</span><br><span class="line">let j = jQuery.noConflict();    //noConflict(true)可以转移jQuery的使用权</span><br><span class="line">jQuery();</span><br><span class="line">j();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>源码</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>闭包</title>
    <url>/2020/03/29/2020-03-29-%E9%97%AD%E5%8C%85-md/</url>
    <content><![CDATA[<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><blockquote>
<p>一般来说闭包就是能够读取其他函数内部变量的函数</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>从内存的角度来说函数执行形成不能被释放的私有栈内存，就是闭包</p>
</blockquote>
<blockquote>
<p>从机制的角度来说函数执行形成私有栈内存，保护私有作用域中的变量不与外界产生联系，这种保护机制就是闭包</p>
</blockquote>
<h4 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h4><ul>
<li><strong>保护（私有变量与外界没有必然联系）</strong></li>
<li><strong>保存（形成不销毁的栈内存，里面的私有变量就保存下来了）</strong></li>
</ul>
<h3 id="闭包作用域"><a href="#闭包作用域" class="headerlink" title="闭包作用域"></a>闭包作用域</h3><ol>
<li>创建函数<ul>
<li>开辟一个堆内存</li>
<li>把函数体中的代码以字符串的形式存储进去</li>
<li>把堆内存的地址赋值给函数名或变量名</li>
<li>函数在哪创建，那么它执行时的上级作用域就是谁</li>
</ul>
</li>
<li>函数执行<ul>
<li>形成一个全新的私有作用域、执行上下文、私有栈内存（执行一次形成一个，多个之间不会产生影响）</li>
<li>形参赋值&amp;变量提升</li>
<li>代码执行（把所属堆内存中的代码字符串拿出来一行一行执行）</li>
<li>遇到一个变量，首先看他是否为私有变量（形参和在私有作用域中声明的变量属于私有变量），私有变量就操作自己的变量即可，不是私有的则向上级作用域中查找，一直找到全局作用域为止=&gt;<strong>作用域链查找机制</strong></li>
<li>私有变量被私有栈内存保护起来了，所以与外界变量没有必然的联系，这就是闭包的保护机制<h3 id="堆栈内存释放问题（以webkit为例）"><a href="#堆栈内存释放问题（以webkit为例）" class="headerlink" title="堆栈内存释放问题（以webkit为例）"></a>堆栈内存释放问题（以webkit为例）</h3><h4 id="堆内存释放"><a href="#堆内存释放" class="headerlink" title="堆内存释放"></a>堆内存释放</h4><blockquote>
<p>创建一个引用类型值就会产生一个堆内存</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<p>如果当前创建的堆内存不被占用，则会释放（浏览器会在会在空闲的时候查找每一个内存引用状况，不被占用的会被回收释放掉）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let obj=&#123;</span><br><span class="line">  name:&apos;堆内存&apos;</span><br><span class="line">&#125;</span><br><span class="line">let oop=obj；</span><br><span class="line">//此时obj和oop都占用着对象的堆内存，想要释放堆内存，需要手动解除变量和值的关联(null：空对象指针)</span><br><span class="line">obj=null;</span><br><span class="line">oop=null;</span><br></pre></td></tr></table></figure>

<h4 id="栈内存释放问题"><a href="#栈内存释放问题" class="headerlink" title="栈内存释放问题"></a>栈内存释放问题</h4><blockquote>
<p>栈内存形成的条件</p>
</blockquote>
<ul>
<li>运行浏览器时形成的全局作用域</li>
<li>手动执行函数形成的私有作用域</li>
<li>let和const形成的块级作用域</li>
</ul>
<blockquote>
<p>栈内存的销毁</p>
</blockquote>
<ul>
<li><p>全局栈内存：关闭的时候才会销毁（刷新页面时，销毁旧的栈内存，再生成新的栈内存）</p>
</li>
<li><p>私有栈内存：</p>
<blockquote>
<p>一般情况下，函数只要执行完成，形成的私有栈内存就会被销毁释放掉（排除出现无限递归或死循环的情况）</p>
</blockquote>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function fn()&#123;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br><span class="line">fn()    //函数执行形成栈内存、执行完成栈内存被销毁</span><br></pre></td></tr></table></figure>

<blockquote>
<p>但是栈内存中的某些东西（如堆地址）被私有作用域以外的事物占用时，则当前栈内存不能立即被释放销毁（导致私有作用域外的私有变量等信息也保留下来了）</p>
</blockquote>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function fn()&#123;</span><br><span class="line">    return function()&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let f = fn()    //f占用了fn执行时形成的栈内存中返回函数对应的堆，使得x执行形成的栈内存不能被释放</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>参考文献：</p>
<blockquote>
<p> –<a href="https://www.bilibili.com/video/BV1J4411B7Pa" target="_blank" rel="noopener">珠峰前端公开课</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>湖工二手go项目笔记</title>
    <url>/2020/03/29/2020-03-29-%E6%B9%96%E5%B7%A5%E4%BA%8C%E6%89%8Bgo%E9%A1%B9%E7%9B%AE-md/</url>
    <content><![CDATA[<h3 id="项目成果展示"><a href="#项目成果展示" class="headerlink" title="项目成果展示"></a>项目成果展示</h3><blockquote>
<p>项目说明：该项目用于毕业设计，未经同意不得转载</p>
</blockquote>
<a id="more"></a>

<img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-blogimg/df805e70-7191-11ea-b94e-47f67ecf8268.png" >
<img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-blogimg/e5f7f290-7191-11ea-9e8b-05a3242b26f2.png" >

<h3 id="uni-app简介"><a href="#uni-app简介" class="headerlink" title="uni-app简介"></a>uni-app简介</h3><blockquote>
<p>uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台</p>
</blockquote>
<p><strong>uni-app的优势</strong></p>
<ul>
<li>开发者/案例数量多，跨端完善度高</li>
<li>平台能力不受限制<br>  在跨端的同时，通过条件编译+平台特有API调用，可以优雅的为某平台写个性化代码，调用专有能力而不影响其他平台</li>
<li>性能体验优秀<ul>
<li>体验更好的Hybrid框架，加载新页面速度更快</li>
<li>App端支持weex原生渲染，可支撑更流畅的用户体验</li>
<li>小程序端的性能优于市场其他框架</li>
</ul>
</li>
<li>周边生态丰富<ul>
<li>插件市场数千款插件</li>
<li>支持NPM、支持小程序组件和SDK、兼容mpvue组件和项目、兼容weex组件</li>
<li>微信生态的各种sdk可直接用于跨平台App</li>
</ul>
</li>
<li>学习成本低<br>  基于通用的前端技术栈，采用vue语法+微信小程序api，无额外学习成本</li>
<li>开发成本低<br>  不止开发成本，招聘、管理、测试各方面成本都大幅下降。</li>
</ul>
<p><strong>功能框架</strong></p>
<blockquote>
<p>uni-app在跨平台的过程中，不牺牲平台特色，可优雅的调用平台专有能力</p>
</blockquote>
<img src="https://img.cdn.aliyun.dcloud.net.cn/uni-app/doc/uni-app-frame-0310.png" >

<p><strong>选用uni-app做小程序的理由</strong></p>
<ul>
<li>性能测试：微信原生开发手工优化&gt;uni-app&gt;微信原生开发未手工优化&gt;taro &gt; wepy &gt; mpvue</li>
</ul>
<img src="http://img.cdn.aliyun.dcloud.net.cn/guide/uniapp/test-frame-13.png" >

<ul>
<li>微信那个IDE和专业编辑器相比实在不好用</li>
<li>vue生态里有太多周边工具，可以提高开发效率</li>
<li>原生开发对Node、预编译器、webpack支持不好，影响开发效率和工程构建流程</li>
</ul>
<p><strong>参考文献</strong><br>–<a href="https://uniapp.dcloud.io/README" target="_blank" rel="noopener">uni-app开发文档</a><br>–<a href="https://ask.dcloud.net.cn/article/35947" target="_blank" rel="noopener">小程序开发</a></p>
<h3 id="uniCloud简介"><a href="#uniCloud简介" class="headerlink" title="uniCloud简介"></a>uniCloud简介</h3><blockquote>
<p>uniCloud 是 DCloud 联合阿里云、腾讯云，为 uni-app 的开发者提供的基于 serverless 模式和 js 编程的云开发平台。uniCloud，在腾讯云、阿里云的 serverless 基础能力之上，实现了真正的跨端。让 uni-app 的开发者使用js开发一云多端的整套业务。并对云开发的功能扩展、开发体验做了很多强化，是下一代开发技术的典型代表。</p>
</blockquote>
<p><strong>开发和运行流程</strong></p>
<blockquote>
<p>开发过程，连接DCloud服务器；运行过程是手机端直连阿里云或腾讯云 serverless 环境，不通过DCloud服务器中转。</p>
</blockquote>
<ul>
<li>开发者在HBuilderX里为项目新建 uniCloud 云环境（可选择阿里云或腾讯云），在云函数目录下编写js代码，上传部署云函数到阿里云或腾讯云的 serverless 环境中。</li>
<li>前端代码通过<strong>uniCloud.callFunction()</strong>方法调用云函数。</li>
<li>云函数中可执行js运算、读写云化数据库（NoSQL）、读写存储和CDN、操作网络，给前端返回数据</li>
</ul>
<p><strong>云开发基础</strong></p>
<ul>
<li>云函数：在云端运行的js代码。运行在定制过的node环境中，有良好的性能和强大的功能。serverless环境无需自行加购服务器处理增容，云函数按量付费，不管多大的并发都扛得住</li>
<li>数据库：可在云函数中读写的、基于 NoSQL 的 JSON 数据库。这种数据库对于前端工程师更自然，不需要学习SQL、不需要理解关系型和设计主键。</li>
<li>存储和CDN：不管在前端还是云函数中，都可以操作存储和CDN。在uniCloud提供的安全机制下，可以实现应用前端直传CDN，避免服务器中转的耗时和带宽占用，且不会发生盗传。</li>
</ul>
<img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-blogimg/a6899f70-719e-11ea-8a36-ebb87efcf8c0.png" >

<p><strong>参考文献</strong><br>–<a href="https://uniapp.dcloud.io/uniCloud/README?id=unicloud-%e7%9a%84%e4%bb%b7%e5%80%bc" target="_blank" rel="noopener">uniCloud帮助文档</a></p>
<h3 id="前端环境搭建"><a href="#前端环境搭建" class="headerlink" title="前端环境搭建"></a>前端环境搭建</h3><blockquote>
<p>该项目采用的是 uni-app 加 uniCloud 的开发模式，也就是前端通过云函数调取云数据库中提供的JSON接口，让代码没有耦合。开发之前需要下载<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">微信开发者工具</a>进行调试</p>
</blockquote>
<ol>
<li><p>创建带uniCloud的uni-app项目（目前只支持使用HBuilder X创建uniCloud项目）</p>
<img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-blogimg/5ae43f90-71a2-11ea-9e8b-05a3242b26f2.png" >
</li>
<li><p>在 mainfest.json 微信小程序配置，微信小程序APPID（在微信开发者工具中申请获得），同时勾选 ES6转ES5 、 上传代码时样式自动补全 以及 上传代码时自动压缩。</p>
</li>
<li><p>在pages页面下创建目录index、community以及my文件夹同时分别在文件夹下创建同名vue文件、components组件文件夹。</p>
</li>
<li><p><a href="https://unicloud.dcloud.net.cn/login" target="_blank" rel="noopener">申请uniCloud</a>云开发账号（需要一天审核时间），审核通过即可创建uniCloud服务空间</p>
</li>
</ol>
<img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-blogimg/2f987000-71b5-11ea-b94e-47f67ecf8268.png" >

<ol start="5">
<li>创建完uniCloud服务空间，即可在项目中的 cloudfunctions目录中绑定uniCloud的服务空间</li>
</ol>
<h3 id="首页实现"><a href="#首页实现" class="headerlink" title="首页实现"></a>首页实现</h3><h4 id="搜索框-轮播图（search）组件"><a href="#搜索框-轮播图（search）组件" class="headerlink" title="搜索框+轮播图（search）组件"></a>搜索框+轮播图（search）组件</h4><p><strong>组件注册</strong></p>
<blockquote>
<p>创建 search.vue 并在 index.vue 中引入并注册 search组件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Search from &apos;./components/search&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">    components:&#123; Search &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>搜索框</strong></p>
<blockquote>
<p>这里的 input 要设置 disabled 属性禁止input的默认点击事件，为后期制作一个单独的搜索页做准备。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 搜索框 --&gt;</span><br><span class="line">&lt;view class=&quot;search&quot;&gt;</span><br><span class="line">	&lt;view class=&quot;search-input&quot;&gt;</span><br><span class="line">		&lt;img src=&quot;../../../static/tab/sousuo.svg&quot; mode=&quot;widthFix&quot;&gt;</span><br><span class="line">		&lt;input type=&quot;text&quot; placeholder=&quot;请输入文字&quot; disabled /&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>
<p><strong>轮播组件</strong></p>
<blockquote>
<p>uni-app提供了swiper组件，这里列举几个常用的属性</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">属性名</th>
<th align="right">类型</th>
<th align="right">默认值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">indicator-dots</td>
<td align="right">Boolean</td>
<td align="right">false</td>
<td align="center">是否显示面板指示点</td>
</tr>
<tr>
<td align="left">indicator-color</td>
<td align="right">Color</td>
<td align="right">rgba(0, 0, 0, .3)</td>
<td align="center">指示点颜色</td>
</tr>
<tr>
<td align="left">indicator-active-color</td>
<td align="right">Color</td>
<td align="right">#000000</td>
<td align="center">当前选中的指示点颜色</td>
</tr>
<tr>
<td align="left">autoplay</td>
<td align="right">Boolean</td>
<td align="right">false</td>
<td align="center">是否自动切换</td>
</tr>
<tr>
<td align="left">interval</td>
<td align="right">Number</td>
<td align="right">5000</td>
<td align="center">自动切换时间间隔</td>
</tr>
<tr>
<td align="left">duration</td>
<td align="right">Number</td>
<td align="right">500</td>
<td align="center">滑动动画时长</td>
</tr>
<tr>
<td align="left">circular</td>
<td align="right">Boolean</td>
<td align="right">false</td>
<td align="center">是否采用衔接滑动</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 轮播组件 --&gt;</span><br><span class="line">&lt;swiper</span><br><span class="line">:indicator-dots=&quot;true&quot;</span><br><span class="line">:autoplay=&quot;true&quot;</span><br><span class="line">:interval=&quot;3000&quot;</span><br><span class="line">:duration=&quot;1000&quot;</span><br><span class="line">:circular=&quot;true&quot;</span><br><span class="line">indicator-color=&quot;rgba(255,255,255)&quot;</span><br><span class="line">indicator-active-color=&quot;#00ff00&quot;</span><br><span class="line">&gt;</span><br><span class="line">	&lt;swiper-item v-for=&quot;(item,index) in banner&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">		&lt;view class=&quot;swiper-item&quot; id=&quot;swiper-item&quot;&gt;</span><br><span class="line">			&lt;img :src=&quot;item.image&quot; class=&quot;img-url&quot; mode=&quot;aspectFill&quot;&gt;</span><br><span class="line">		&lt;/view&gt;</span><br><span class="line">	&lt;/swiper-item&gt;</span><br><span class="line">&lt;/swiper&gt;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/liZhuTao/uniCloud/blob/master/pages/index/components/search.vue" target="_blank" rel="noopener">search组件完整代码</a></p>
<h4 id="轮播组件的数据上传到uniCloud"><a href="#轮播组件的数据上传到uniCloud" class="headerlink" title="轮播组件的数据上传到uniCloud"></a>轮播组件的数据上传到uniCloud</h4><p><strong>将数据上传至uniCloud云数据库</strong></p>
<blockquote>
<p>先将轮播的图片存储到云存储中,云存储会操作生成图片的地址</p>
</blockquote>
<img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-blogimg/229c9200-71bf-11ea-b997-9918a5dda011.png" >

<blockquote>
<p>创建banner集合，并上传数据（上传数据需要按照JSON的格式上传）</p>
</blockquote>
<img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-blogimg/76d99f80-71be-11ea-8bd0-2998ac5bbf7e.png" >

<h4 id="云函数操作数据库"><a href="#云函数操作数据库" class="headerlink" title="云函数操作数据库"></a>云函数操作数据库</h4><blockquote>
<p>uniCloud中不允许前端直接调用云数据库中的数据，必须通过云函数来调用并返回给前端，前端用<a href="https://uniapp.dcloud.io/uniCloud/cf-functions?id=%e5%ae%a2%e6%88%b7%e7%ab%af%e8%b0%83%e7%94%a8%e4%ba%91%e5%87%bd%e6%95%b0" target="_blank" rel="noopener">uniCloud.callFunction</a>调用云函数，并接收返回结果</p>
</blockquote>
<p><strong>创建云函数</strong></p>
<blockquote>
<p>右键cloudfunction文件夹，选择新建云函数getData</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">//获取数据库</span><br><span class="line">const db = uniCloud.database();</span><br><span class="line"></span><br><span class="line">exports.main = async (event, context) =&gt; &#123;</span><br><span class="line">  //event为客户端上传的参数(用户要以对象的形式上传数据)</span><br><span class="line">  let list = event.list                     //list为前端传来的要操作的集合名称</span><br><span class="line">  const banner = db.collection(list)		// 获取集合的引用</span><br><span class="line">  const res = await banner.get()</span><br><span class="line">  //返回数据给客户端</span><br><span class="line">  return res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>创建完云函数后，右键getData文件夹，选择上传并运行 就可以将云函数上传并部署到uniCloud服务空间上（注意在IDE中运行，云函数可能会报错或者event返回空对象，先将项目运行到微信小程序上，再到<a href="https://unicloud.dcloud.net.cn/" target="_blank" rel="noopener">uniCloud</a>中找到对应的云函数，打开日志，在前端触发一下云函数，在看是否会报错或者event为空）</p>
</blockquote>
<p><strong>前端操作云函数</strong></p>
<blockquote>
<p>在项目根目录中创建 common公共组件目录，并在其中创建一个的公共组件cloudFun，用于获取与函数返回的数据库信息</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let getData = function(list) &#123;</span><br><span class="line">	let mylist = list</span><br><span class="line">	return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">		uniCloud.callFunction(&#123;</span><br><span class="line">				name: &apos;getData&apos;,</span><br><span class="line">				data: &#123;</span><br><span class="line">					&quot;list&quot;: mylist		//前端通过data对象将数据传给云函数</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">			.then(res =&gt; &#123;</span><br><span class="line">				resolve(res)</span><br><span class="line">			&#125;)</span><br><span class="line">			.catch(err =&gt; &#123;</span><br><span class="line">				reject(err)</span><br><span class="line">			&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123; getData &#125;		//将函数导出</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/liZhuTao/uniCloud/blob/master/common/cloudFun.js" target="_blank" rel="noopener">cloudFun源码</a></p>
<blockquote>
<p>在index.vue中的 created 生命周期中<strong>获取数据</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123;getData&#125; from &apos;../../common/cloudFun.js&apos;		//操作数据库组件</span><br><span class="line">export default&#123;</span><br><span class="line">	data()&#123;</span><br><span class="line">   		return &#123; banner:[] &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	created()&#123;</span><br><span class="line">    	//请求数据</span><br><span class="line">    	let banner = &quot;banner&quot;</span><br><span class="line">    	getData(banner)</span><br><span class="line">    	.then(res=&gt;&#123;</span><br><span class="line">    	    this.banner = res.result.data</span><br><span class="line">    	&#125;)</span><br><span class="line">    	.catch(err=&gt;&#123;</span><br><span class="line">    	    console.log(err)</span><br><span class="line">    	&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将数据传给search组件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Search :banner=&quot;banner&quot;&gt;&lt;/Search&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在search中接收数据,就可以直接将数据遍历到轮播图</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line">	name:&apos;search&apos;,</span><br><span class="line">	props:&#123;</span><br><span class="line">		banner:Array</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="分类导航（ticket）组件"><a href="#分类导航（ticket）组件" class="headerlink" title="分类导航（ticket）组件"></a>分类导航（ticket）组件</h4><blockquote>
<p>首先在根目录下创建一个<a href="https://github.com/liZhuTao/uniCloud/tree/master/static" target="_blank" rel="noopener">static</a>文件夹用于存储静态文件（同样也可以放在云存储中），在static文件夹下创建tab文件夹来存储首页需要的图片<br><strong>ticket.vue</strong><br>创建完成后再index.vue的components中注册才能使用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view&gt;</span><br><span class="line">		&lt;!-- 分类导航 --&gt;</span><br><span class="line">		&lt;view class=&quot;sort&quot;&gt;</span><br><span class="line">			&lt;view class=&quot;sort-item&quot; v-for=&quot;(item,index) in sortList&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">				&lt;img :src=&quot;item.image&quot;&gt;</span><br><span class="line">				&lt;text&gt;&#123;&#123;item.name&#125;&#125;&lt;/text&gt;</span><br><span class="line">			&lt;/view&gt;</span><br><span class="line">		&lt;/view&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default&#123;</span><br><span class="line">		name:&apos;ticket&apos;,</span><br><span class="line">		data()&#123;</span><br><span class="line">			return &#123;</span><br><span class="line">				sortList:[</span><br><span class="line">					&#123;image:require(&quot;../../../static/tab/man.png&quot;),name:&quot;男装&quot;&#125;,</span><br><span class="line">					&#123;image:require(&quot;../../../static/tab/weman.png&quot;),name:&quot;女装&quot;&#125;,</span><br><span class="line">					&#123;image:require(&quot;../../../static/tab/book.png&quot;),name:&quot;书籍&quot;&#125;,</span><br><span class="line">					&#123;image:require(&quot;../../../static/tab/life.png&quot;),name:&quot;生活&quot;&#125;,</span><br><span class="line">					&#123;image:require(&quot;../../../static/tab/phone.png&quot;),name:&quot;电子&quot;&#125;</span><br><span class="line">				]</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">	.sort&#123;</span><br><span class="line">		display: flex;</span><br><span class="line">		flex-direction: row;</span><br><span class="line">		flex-wrap: nowrap;</span><br><span class="line">		justify-content: space-between;</span><br><span class="line">		align-items: center;</span><br><span class="line">		margin: 30upx 30upx;</span><br><span class="line">	&#125;</span><br><span class="line">	.sort-item&#123;&#125;</span><br><span class="line">	.sort-item img&#123;</span><br><span class="line">		width: 90upx;</span><br><span class="line">		height: 90upx;</span><br><span class="line">	&#125;</span><br><span class="line">	.sort text&#123;</span><br><span class="line">		font-size: 30upx;</span><br><span class="line">		display: block;</span><br><span class="line">		margin-left: 15upx;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="小分类（classify）组件"><a href="#小分类（classify）组件" class="headerlink" title="小分类（classify）组件"></a>小分类（classify）组件</h4><blockquote>
<p>创建完成后再index.vue的components中注册才能使用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view style=&quot;margin: 0 20upx;&quot;&gt;</span><br><span class="line">		&lt;view class=&quot;notice&quot;&gt;</span><br><span class="line">			&lt;view v-for=&quot;(item,index) in noticeList&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">				&lt;text class=&quot;notice-title&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/text&gt;</span><br><span class="line">				&lt;text class=&quot;notice-describe&quot;&gt;&#123;&#123;item.describe&#125;&#125;&lt;/text&gt;</span><br><span class="line">			&lt;/view&gt;</span><br><span class="line">		&lt;/view&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default&#123;</span><br><span class="line">		name:&apos;classify&apos;,</span><br><span class="line">		data()&#123;</span><br><span class="line">			return &#123;</span><br><span class="line">				noticeList:[</span><br><span class="line">					&#123;title:&quot;标题1&quot;,describe:&quot;描述1&quot;&#125;,</span><br><span class="line">					&#123;title:&quot;标题2&quot;,describe:&quot;描述2&quot;&#125;,</span><br><span class="line">					&#123;title:&quot;标题3&quot;,describe:&quot;描述3&quot;&#125;,</span><br><span class="line">					&#123;title:&quot;标题4&quot;,describe:&quot;描述4&quot;&#125;,</span><br><span class="line">					&#123;title:&quot;标题5&quot;,describe:&quot;描述5&quot;&#125;,</span><br><span class="line">					&#123;title:&quot;标题6&quot;,describe:&quot;描述6&quot;&#125;,</span><br><span class="line">					&#123;title:&quot;标题7&quot;,describe:&quot;描述7&quot;&#125;,</span><br><span class="line">					&#123;title:&quot;标题8&quot;,describe:&quot;描述8&quot;&#125;,</span><br><span class="line">				]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>–<a href="https://github.com/liZhuTao/uniCloud/blob/master/pages/index/components/classify.vue" target="_blank" rel="noopener">classify组件源码</a></p>
<h4 id="导航（content）组件"><a href="#导航（content）组件" class="headerlink" title="导航（content）组件"></a>导航（content）组件</h4><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-blogimg/9e820e80-7238-11ea-b94e-47f67ecf8268.png">
**布局**
> [scroll-view](https://uniapp.dcloud.io/component/scroll-view?id=scroll-view)是uni-app中自带的滚动视图组件
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view&gt;</span><br><span class="line">		&lt;scroll-view scroll-x=&quot;true&quot; class=&quot;scroll&quot; scroll-with-animation=&quot;true&quot;&gt;</span><br><span class="line">			&lt;view v-for=&quot;(item,index) in tab&quot; :key=&quot;index&quot; class=&quot;list-cont&quot; @click=&quot;clickTabs(index,item.nav)&quot;&gt;</span><br><span class="line">				&lt;view :class=&quot;&#123;active: index== num&#125;&quot;&gt;</span><br><span class="line">					&lt;view&gt;</span><br><span class="line">						&lt;text class=&quot;con-text-a&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/text&gt;</span><br><span class="line">					&lt;/view&gt;</span><br><span class="line">					&lt;view&gt;</span><br><span class="line">						&lt;text class=&quot;con-text-b&quot; :class=&quot;&#123;activeb: index== num&#125;&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/text&gt;</span><br><span class="line">					&lt;/view&gt;</span><br><span class="line">				&lt;/view&gt;</span><br><span class="line">			&lt;/view&gt;</span><br><span class="line">		&lt;/scroll-view&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
> click点击事件
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line">	name:&quot;content&quot;,</span><br><span class="line">	data()&#123;</span><br><span class="line">			return&#123;</span><br><span class="line">				num: 0,</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	methods:&#123;</span><br><span class="line">		clickTabs(index,nav)&#123;</span><br><span class="line">			this.num = index;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="商品（article）组件"><a href="#商品（article）组件" class="headerlink" title="商品（article）组件"></a>商品（article）组件</h4><p><strong>布局</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view class=&quot;active&quot;&gt;</span><br><span class="line">			&lt;view class=&quot;conteng&quot;&gt;</span><br><span class="line">				&lt;block v-for=&quot;(item,index) in list&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">				&lt;view class=&quot;conteng-article&quot;&gt;</span><br><span class="line">					&lt;view  class=&quot;conteng-img&quot;&gt;</span><br><span class="line">					&lt;image :src=&quot;item.image&quot; mode=&quot;aspectFill&quot;&gt;&lt;/image&gt;	</span><br><span class="line">					&lt;/view&gt;</span><br><span class="line">					&lt;!-- 文字介绍 --&gt;</span><br><span class="line">					&lt;view class=&quot;active-introduce&quot;&gt;</span><br><span class="line">						&lt;view class=&quot;active-name&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/view&gt;</span><br><span class="line">						&lt;view class=&quot;active-title&quot;&gt;&#123;&#123;item.list&#125;&#125;&lt;/view&gt;</span><br><span class="line">						&lt;view class=&quot;active-label&quot;&gt;&#123;&#123;item.label&#125;&#125;&lt;/view&gt;</span><br><span class="line">						&lt;view class=&quot;purchase&quot;&gt;</span><br><span class="line">							&lt;text class=&quot;active-price&quot;&gt;￥&#123;&#123;item.price&#125;&#125;&lt;/text&gt;</span><br><span class="line">							&lt;text class=&quot;active-purchase&quot;&gt;&#123;&#123;item.buy&#125;&#125;人想买&lt;/text&gt;</span><br><span class="line">						&lt;/view&gt;</span><br><span class="line">					&lt;/view&gt;</span><br><span class="line">				&lt;/view&gt;</span><br><span class="line">				&lt;/block&gt;</span><br><span class="line">			&lt;/view&gt;</span><br><span class="line">		&lt;/view&gt; </span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h4 id="导航-商品获取数据"><a href="#导航-商品获取数据" class="headerlink" title="导航+商品获取数据"></a>导航+商品获取数据</h4><p><strong>上传数据</strong></p>
<blockquote>
<p>在<a href="https://unicloud.dcloud.net.cn/" target="_blank" rel="noopener">uniCloud</a>云数据库中创建tab和recommend集合并将导航栏信息和商品信息上传上去（详细操作请参照 5.2.轮播组件的数据上传到uniCloud ）</p>
</blockquote>
<p><strong>导航获取数据</strong></p>
<blockquote>
<p>导航通过 getData()获取相应数据（详细操作请参照 5.3.云函数操作数据库 ）</p>
</blockquote>
<p><strong>商品获取数据</strong></p>
<blockquote>
<ol>
<li>在cloudfunction中新建云函数getGoods，在getGoods下的index.js中编写以下代码</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">//获取数据库</span><br><span class="line">const db = uniCloud.database();</span><br><span class="line"></span><br><span class="line">exports.main = async (event, context) =&gt; &#123;</span><br><span class="line">  //event为客户端上传的参数</span><br><span class="line">  let list = event.list</span><br><span class="line">  let pageid = event.pageid</span><br><span class="line">  const banner = db.collection(list)		// 获取集合的引用</span><br><span class="line">  .limit(6)  		//开始拉取数据的数量</span><br><span class="line">  .skip(pageid*6)   //拉取数据的索引(每次下拉加载6条数据)</span><br><span class="line">  const res = await banner.get()</span><br><span class="line">  //返回数据给客户端</span><br><span class="line">  return res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="2">
<li>在common中的cloudFun中添加以下代码</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let getGoods = function(list,pageid) &#123;</span><br><span class="line">	return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">		uniCloud.callFunction(&#123;</span><br><span class="line">				name: &apos;getGoods&apos;,</span><br><span class="line">				data: &#123;</span><br><span class="line">					&quot;list&quot;: list,		//list用于指定操作的集合名称</span><br><span class="line">					&quot;pageid&quot;:pageid		//pageid用于获取数据数量的标识</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">			.then(res =&gt; &#123;</span><br><span class="line">				resolve(res)</span><br><span class="line">			&#125;)</span><br><span class="line">			.catch(err =&gt; &#123;</span><br><span class="line">				reject(err)</span><br><span class="line">			&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123; getGoods &#125;		//将函数导出</span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="3">
<li>改写index.vue中created()生命周期函数中的代码，使用Promise.all同时获取轮播图、导航栏、商品信息</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">	//请求数据</span><br><span class="line">	let banner = &quot;banner&quot;</span><br><span class="line">	let tab = &quot;tab&quot;</span><br><span class="line">	let lising = &quot;recommend&quot;</span><br><span class="line">	//基于promise.all 批量接受多个接口，同时得到多个数据</span><br><span class="line">	Promise.all([getData(banner),getData(tab),getGoods(lising,this.pageid)])</span><br><span class="line">	.then(res=&gt;&#123;</span><br><span class="line">		this.banner = res[0].result.data		//轮播数据</span><br><span class="line">		this.tab = res[1].result.data			//tab数据</span><br><span class="line">		this.list = res[2].result.data			//推荐数据</span><br><span class="line">	&#125;)</span><br><span class="line">	.catch(err=&gt;&#123;</span><br><span class="line">		console.log(err)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="4">
<li>组件接收数据</li>
</ol>
<p>– index.vue</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Content id=&quot;boxFixed&quot; :class=&quot;&#123;is_fixed:isFixed&#125;&quot; :tab=&quot;tab&quot;&gt;&lt;/Content&gt;</span><br><span class="line">&lt;view style=&quot;height: 140upx;&quot;&gt;&lt;/view&gt;		//防止导航组件飘在商品组件上</span><br><span class="line">&lt;Article :list=&quot;list&quot; v-if=&quot;!loadinglist&quot;&gt;&lt;/Article&gt;</span><br></pre></td></tr></table></figure>
<p>– 组件中使用props接收数据，上面操作过这里不在过多赘述</p>
<h4 id="增加用户体验的自定义组件"><a href="#增加用户体验的自定义组件" class="headerlink" title="增加用户体验的自定义组件"></a>增加用户体验的自定义组件</h4><blockquote>
<p>首先在项目根目录下创建element文件夹用于存放自定义的组件</p>
</blockquote>
<ol>
<li><strong>tab切换的loading组件</strong><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-blogimg/4350e4b0-724b-11ea-8bd0-2998ac5bbf7e.gif">
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view class=&quot;loading&quot;&gt;</span><br><span class="line">		&lt;view class=&quot;loader&quot;&gt;&lt;/view&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">	.loading&#123;</span><br><span class="line">		display: flex;</span><br><span class="line">		justify-content: center;</span><br><span class="line">		padding: 20upx 0;</span><br><span class="line">	&#125;</span><br><span class="line">	.loader&#123;</span><br><span class="line">		display: inline-block;</span><br><span class="line">		width: 40upx;</span><br><span class="line">		height: 40upx;</span><br><span class="line">		color: inherit;</span><br><span class="line">		border: 7upx solid greenyellow;</span><br><span class="line">		border-bottom-color: transparent;</span><br><span class="line">		border-radius: 50%;</span><br><span class="line">		animation: 1s loader linear infinite;</span><br><span class="line">	&#125;</span><br><span class="line">	/* 360度旋转 */</span><br><span class="line">	@keyframes loader&#123;</span><br><span class="line">		0%&#123;</span><br><span class="line">			transform: rotate(0deg);</span><br><span class="line">		&#125;</span><br><span class="line">		100%&#123;</span><br><span class="line">			transform: rotate(360deg);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
<li><strong>没有数据时的提示</strong><blockquote>
<p>图片是从飞猪旅游的手机端复制过来的</p>
</blockquote>
</li>
</ol>
<img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-blogimg/29ec6d30-724d-11ea-8a36-ebb87efcf8c0.png">
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view class=&quot;nonedata&quot;&gt;</span><br><span class="line">		&lt;img src=&quot;../static/tab/noimage.png&quot; mode=&quot;widthFix&quot;&gt;</span><br><span class="line">		&lt;text&gt;主人，这里什么都没有&lt;/text&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">	.nonedata&#123;</span><br><span class="line">		text-align: center;</span><br><span class="line">	&#125;</span><br><span class="line">	.nonedata img&#123;</span><br><span class="line">		width: 200upx;</span><br><span class="line">		height: 200upx;</span><br><span class="line">	&#125;</span><br><span class="line">	.nonedata text&#123;</span><br><span class="line">		display: block;</span><br><span class="line">		font-size: 30upx;</span><br><span class="line">		color: rgb(153,153,153);</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>进入小程序时loading加载</strong></li>
</ol>
<blockquote>
<p>页面还未完全获取数据时显示进入页面的loading加载</p>
</blockquote>
<img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-blogimg/ee8f2bf0-724d-11ea-b244-a9f5e5565f30.png" >

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view class=&quot;loadmin&quot;&gt;</span><br><span class="line">		&lt;view class=&quot;home-load&quot;&gt;</span><br><span class="line">			&lt;image src=&quot;../static/tab/homeload.svg&quot; mode=&quot;widthFix&quot;&gt;&lt;/image&gt;</span><br><span class="line">		&lt;/view&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">	.home-load&#123;</span><br><span class="line">		display: flex;</span><br><span class="line">		align-items: center;</span><br><span class="line">		justify-content: center;</span><br><span class="line">		width: 100%;</span><br><span class="line">		height: 100%;</span><br><span class="line">	&#125;</span><br><span class="line">	.home-load image&#123;</span><br><span class="line">		width: 200upx;</span><br><span class="line">		height: 200upx;</span><br><span class="line">		background: rgba(0,0,0,0.2);</span><br><span class="line">		border-radius: 10upx;</span><br><span class="line">	&#125;</span><br><span class="line">	.loadmin&#123;</span><br><span class="line">		position: fixed;</span><br><span class="line">		top: 0;</span><br><span class="line">		bottom: 0;</span><br><span class="line">		left: 0;</span><br><span class="line">		right: 0;</span><br><span class="line">		z-index: 9999;</span><br><span class="line">		overflow: hidden;</span><br><span class="line">		background: rgba(242,243,244,0.6);</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>全局引入自定义组件</strong></li>
</ol>
<blockquote>
<p>在项目根目录中的<a href="https://github.com/liZhuTao/uniCloud/blob/master/main.js" target="_blank" rel="noopener">main.js</a>中添加以下代码,就可以在项目中使用组件了</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import App from &apos;./App&apos;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">//引用tab切换的loading</span><br><span class="line">import loader from &apos;./element/loading.vue&apos;</span><br><span class="line">Vue.component(&apos;load-list&apos;,loader)</span><br><span class="line"></span><br><span class="line">//引入没有数据的提示</span><br><span class="line">import nonedata from &apos;./element/none.vue&apos;</span><br><span class="line">Vue.component(&apos;none-data&apos;,nonedata)</span><br><span class="line"></span><br><span class="line">//进入页面的loading加载</span><br><span class="line">import homeload from &apos;./element/homeload.vue&apos;</span><br><span class="line">Vue.component(&apos;home-load&apos;,homeload)</span><br><span class="line"></span><br><span class="line">App.mpType = &apos;app&apos;</span><br><span class="line"></span><br><span class="line">const app = new Vue(&#123;</span><br><span class="line">    ...App</span><br><span class="line">&#125;)</span><br><span class="line">app.$mount()</span><br></pre></td></tr></table></figure>
<p>– index.vue的template，loadinglist、homeload、nonedata用于管理组件状态，为后面的vuex使用做准备</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;load-list v-if=&quot;loadinglist&quot;&gt;&lt;/load-list&gt;</span><br><span class="line">&lt;Article :list=&quot;list&quot; v-if=&quot;!loadinglist&quot;&gt;&lt;/Article&gt;</span><br><span class="line">&lt;!-- 进入页面的loading加载 --&gt;</span><br><span class="line">&lt;home-load v-if=&quot;homeload&quot;&gt;&lt;/home-load&gt;</span><br><span class="line">&lt;!-- 没有数据的提示 --&gt;</span><br><span class="line">&lt;none-data v-if=&quot;nonedata&quot;&gt;&lt;/none-data&gt;</span><br></pre></td></tr></table></figure>

<h4 id="vuex状态管理"><a href="#vuex状态管理" class="headerlink" title="vuex状态管理"></a>vuex状态管理</h4>]]></content>
      <categories>
        <category>项目笔记</category>
      </categories>
      <tags>
        <tag>项目笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>vuex</title>
    <url>/2020/03/30/2020-03-30-vuex-md/</url>
    <content><![CDATA[<h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><blockquote>
<p>官网上介绍，Vuex是一个专为Vue.js应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>
</blockquote>
<a id="more"></a>
<h3 id="状态管理模式"><a href="#状态管理模式" class="headerlink" title="状态管理模式"></a>状态管理模式</h3><blockquote>
<p>如果你熟悉vue.js开发，那么你一定对各组件之间传值的问题倍感头疼，而vuex就是用来解决各个组件之间共用值得传递问题</p>
</blockquote>
<p>– 1. 在你的项目中安装vuex</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure>

<p>– 2. 在src文件目录中新建store文件夹，再在这个文件夹下创建一个index.js文件并输入以下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;;</span><br><span class="line">import Vuex from &apos;vuex&apos;;</span><br><span class="line">//使用vuex</span><br><span class="line">Vue.use(Vuex);</span><br><span class="line">//创建Vuex.Store实例保存到变量store中</span><br><span class="line">const store = new Vuex.Store();</span><br><span class="line"> </span><br><span class="line">export default store;       //导出store</span><br></pre></td></tr></table></figure>
<p>– 3. 在main.js文件中引用该对象,这样就可以在任何一个组件里面使用this.$store了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import store from &apos;./store&apos;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  router,</span><br><span class="line">  store,//使用store</span><br><span class="line">  template: &apos;&lt;App/&gt;&apos;,</span><br><span class="line">  components: &#123; App &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="vuex核心"><a href="#vuex核心" class="headerlink" title="vuex核心"></a>vuex核心</h2><blockquote>
<p>官网图片</p>
</blockquote>
<img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-blogimg/9ba18300-7268-11ea-b94e-47f67ecf8268.jpg" >

<h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><blockquote>
<p>store相当于一个商店，不同的组件可以来商店来获取自己想要的商品，而state就相当于商店的货架，组件可以通多store.state.XXX获取需要的状态</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 创建一个 Counter 组件</span><br><span class="line">const Counter = &#123;</span><br><span class="line">  template: `&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      return store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>– 每当 store.state.count变化的时候, 都会重新求取计算属性，并且触发更新相关联的 DOM。然而，这种模式导致组件依赖全局状态单例。Vuex 通过 store 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 Vue.use(Vuex)）：</p>
<p>– 通过在根实例中注册 store 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 this.$store 访问到。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const Counter = &#123;</span><br><span class="line">  template: `&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      return this.$store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="mapState辅助函数"><a href="#mapState辅助函数" class="headerlink" title="mapState辅助函数"></a>mapState辅助函数</h4><blockquote>
<p>当组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。mapState辅助函数帮助我们生成计算属性</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 在单独构建的版本中辅助函数为 Vuex.mapState</span><br><span class="line">import &#123; mapState &#125; from &apos;vuex&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  // ...</span><br><span class="line">  computed: mapState(&#123;</span><br><span class="line">    // 箭头函数可使代码更简练</span><br><span class="line">    count: state =&gt; state.count,</span><br><span class="line"></span><br><span class="line">    // 传字符串参数 &apos;count&apos; 等同于 `state =&gt; state.count`</span><br><span class="line">    countAlias: &apos;count&apos;,</span><br><span class="line"></span><br><span class="line">    // 为了能够使用 `this` 获取局部状态，必须使用常规函数</span><br><span class="line">    countPlusLocalState (state) &#123;</span><br><span class="line">      return state.count + this.localCount</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="对象展开运算符"><a href="#对象展开运算符" class="headerlink" title="对象展开运算符"></a>对象展开运算符</h4><blockquote>
<p>mapState函数返回的是一个对象。通常，我们可以在<strong>computed</strong>使用<strong><a href="https://github.com/tc39/proposal-object-rest-spread" target="_blank" rel="noopener">对象展开运算符</a></strong>，将多个对象合并成一个</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  localComputed () &#123; </span><br><span class="line">    // ... </span><br><span class="line">  &#125;,</span><br><span class="line">  // 使用对象展开运算符将此对象混入到外部对象中</span><br><span class="line">  ...mapState(&#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><blockquote>
<p>如果我们将state看做store的data属性，那么getter就可以被看做store的computed属性（getter的返回值根据他的依赖被缓存起来，当依赖改变时会被重新计算）。</p>
</blockquote>
<p>– getter 接受 state 作为其第一个参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; id: 1, text: &apos;...&apos;, done: true &#125;,</span><br><span class="line">      &#123; id: 2, text: &apos;...&apos;, done: false &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doneTodos: state =&gt; &#123;</span><br><span class="line">      return state.todos.filter(todo =&gt; todo.done)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.getters.doneTodos // -&gt; [&#123; id: 1, text: &apos;...&apos;, done: true &#125;]</span><br></pre></td></tr></table></figure>
<p>– Getter 也可以接受其他 getter 作为第二个参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  // ...</span><br><span class="line">  doneTodosCount: (state, getters) =&gt; &#123;</span><br><span class="line">    return getters.doneTodos.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">store.getters.doneTodosCount // -&gt; 1</span><br></pre></td></tr></table></figure>
<h4 id="mapGetter辅助函数"><a href="#mapGetter辅助函数" class="headerlink" title="mapGetter辅助函数"></a>mapGetter辅助函数</h4><blockquote>
<p>mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; mapGetters &#125; from &apos;vuex&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  // ...</span><br><span class="line">  computed: &#123;</span><br><span class="line">  // 使用对象展开运算符将 getter 混入 computed 对象中</span><br><span class="line">    ...mapGetters([&apos;doneTodosCount&apos;])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><blockquote>
<p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation,Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      // 变更状态</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>– 调用此函数,需要以相应的 type 调用 store.commit 方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">store.commit(&apos;increment&apos;)</span><br></pre></td></tr></table></figure>
<h4 id="载荷（Payload）"><a href="#载荷（Payload）" class="headerlink" title="载荷（Payload）"></a>载荷（Payload）</h4><p>– store&gt;store.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, payload) &#123;</span><br><span class="line">    state.count += payload.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>你可以向 store.commit 传入额外的参数，即 mutation 的 载荷（payload）：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">store.commit(&apos;increment&apos;, 10)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>大多数情况下，载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读：</p>
</blockquote>
<p>– xxx.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">store.commit(&apos;increment&apos;, &#123;</span><br><span class="line">  amount: 10</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="使用常量替代-Mutation-事件类型"><a href="#使用常量替代-Mutation-事件类型" class="headerlink" title="使用常量替代 Mutation 事件类型"></a>使用常量替代 Mutation 事件类型</h4><blockquote>
<p>使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然：</p>
</blockquote>
<p>– mutation-types.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const SOME_MUTATION = &apos;SOME_MUTATION&apos;</span><br></pre></td></tr></table></figure>
<p>– store.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vuex from &apos;vuex&apos;</span><br><span class="line">import &#123; SOME_MUTATION &#125; from &apos;./mutation-types&apos;</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    // 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span><br><span class="line">    [SOME_MUTATION] (state) &#123;</span><br><span class="line">      // mutate state</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="在组件中提交-Mutation"><a href="#在组件中提交-Mutation" class="headerlink" title="在组件中提交 Mutation"></a>在组件中提交 Mutation</h4><blockquote>
<p>可以在组件中使用 this.$store.commit(‘xxx’) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; mapMutations &#125; from &apos;vuex&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  // ...</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapMutations([</span><br><span class="line">      &apos;increment&apos;, // 将 `this.increment()` 映射为 `this.$store.commit(&apos;increment&apos;)`</span><br><span class="line"></span><br><span class="line">      // `mapMutations` 也支持载荷：</span><br><span class="line">      &apos;incrementBy&apos; // 将 `this.incrementBy(amount)` 映射为 `this.$store.commit(&apos;incrementBy&apos;, amount)`</span><br><span class="line">    ]),</span><br><span class="line">    ...mapMutations(&#123;</span><br><span class="line">      add: &apos;increment&apos; // 将 `this.add()` 映射为 `this.$store.commit(&apos;increment&apos;)`</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意一条重要的原则就是要记住 mutation 必须是同步函数,在 mutation 中混合异步调用会导致你的程序很难调试。</strong></p>
</blockquote>
<h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><blockquote>
<p>Action 类似于 mutation，不同在于：</p>
</blockquote>
<ul>
<li>Action 提交的是 mutation，而不是直接变更状态。</li>
<li>Action 可以包含任意异步操作。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment (&#123; commit &#125;) &#123;    //参数解构来简化代码</span><br><span class="line">        commit(&apos;increment&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="分发-Action"><a href="#分发-Action" class="headerlink" title="分发 Action"></a>分发 Action</h4><blockquote>
<p>Action 通过store.dispatch方法触发：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">store.dispatch(&apos;increment&apos;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>action 内部可以执行异步操作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  incrementAsync (&#123; commit &#125;) &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      commit(&apos;increment&apos;)</span><br><span class="line">    &#125;, 1000)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="mapActions辅助函数"><a href="#mapActions辅助函数" class="headerlink" title="mapActions辅助函数"></a>mapActions辅助函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; mapActions &#125; from &apos;vuex&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  // ...</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapActions([</span><br><span class="line">      &apos;increment&apos;, // 将 `this.increment()` 映射为 `this.$store.dispatch(&apos;increment&apos;)`</span><br><span class="line"></span><br><span class="line">      // `mapActions` 也支持载荷：</span><br><span class="line">      &apos;incrementBy&apos; // 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch(&apos;incrementBy&apos;, amount)`</span><br><span class="line">    ]),</span><br><span class="line">    ...mapActions(&#123;</span><br><span class="line">      add: &apos;increment&apos; // 将 `this.add()` 映射为 `this.$store.dispatch(&apos;increment&apos;)`</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="vuex中mutation和action的详细区别"><a href="#vuex中mutation和action的详细区别" class="headerlink" title="vuex中mutation和action的详细区别"></a>vuex中mutation和action的详细区别</h4></li>
</ul>
<ol>
<li>流程顺序</li>
</ol>
<p>“相应视图—&gt;修改State”拆分成两部分，视图触发Action，Action再触发Mutation。</p>
<ol start="2">
<li>角色定位</li>
</ol>
<p>基于流程顺序，二者扮演不同的角色。</p>
<pre><code>Mutation：专注于修改State，理论上是修改State的唯一途径。

Action：业务代码、异步请求。</code></pre><ol start="3">
<li>限制</li>
</ol>
<p>角色不同，二者有不同的限制。</p>
<pre><code>Mutation：必须同步执行。

Action：可以异步，但不能直接操作State。</code></pre><blockquote>
<p>他两者之间不是功能的不同，而是编程思想的不同，按照官方规定书写代码高效、易维护、逻辑清晰</p>
</blockquote>
<h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><blockquote>
<p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const moduleA = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const moduleB = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a // -&gt; moduleA 的状态</span><br><span class="line">store.state.b // -&gt; moduleB 的状态</span><br></pre></td></tr></table></figure>





<p><strong>参考文献</strong></p>
<p><a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">vuex是什么</a></p>
<p><a href="https://segmentfault.com/a/1190000015782272" target="_blank" rel="noopener">VueJS中学习使用Vuex详解</a></p>
<p><a href="https://blog.csdn.net/weixin_38483133/article/details/89327362" target="_blank" rel="noopener">vuex中mutation和action的详细区别</a></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2020/01/31/2020-1-31-git-md/</url>
    <content><![CDATA[<h3 id="git简介"><a href="#git简介" class="headerlink" title="git简介"></a>git简介</h3><blockquote>
<p>git是一款开源的分布式版本控制系统，能够有效、高速的处理从小到大的项目版本管理。</p>
</blockquote>
<a id="more"></a>
<p>市面上常见的版本控制器有两种：</p>
<ul>
<li>分布式的 Git</li>
<li>集中式的 SVN</li>
</ul>
<h3 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h3><h4 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a>代码仓库</h4><p>创建仓库</p>
<pre><code>1.进入需要创建代码仓库的文件夹      cd [文件路径]
2.初始化代码仓库                    git init
3.远程拉去仓库到本地                git clone</code></pre><p>添加文件到仓库</p>
<pre><code>1.添加文件到暂存区
    + 添加单个文件到暂存区          git add [文件名]
    + 添加所用文件到暂存区          git add ./-A
2.把暂存区文件提交到历史区
    + git commit -m&apos;描述信息&apos;
    + 建议使用  git commit 再填写 git message
3.查看工作区状态
    + git status
4.对比工作区变化
    + git diff</code></pre><p>仓库配置</p>
<pre><code>1.配置全局用户名和邮箱
    + git config --global user.name &quot;[name]&quot;
    + git config --global user,email &quot;[email address]&quot;
2.配置当前仓库用户名和密码
    + git config user.name &quot;[name]&quot;
    + git config user.email &quot;[email address]&quot;</code></pre><p>将本地仓库信息提交到远程仓库</p>
<pre><code>1.建立本地仓库与远程仓库的连接
    + 查看建立连接      git remote -v
    + 建立连接          git remote add origin [仓库地址]
    + 删除连接          git remote rm origin 
2.先拉取在提交
    + 拉取              git pull origin master
    + 提交              git push origin master</code></pre><p>克隆远程仓库</p>
<pre><code>git clone [本地仓库] [别名（可省略）]
1.初始化本地仓库
2.关联远程仓库
3.默认内容拉取到本地</code></pre><h4 id="代码版本"><a href="#代码版本" class="headerlink" title="代码版本"></a>代码版本</h4><pre><code>1.查看历史版本信息
    + git log                       提交详情
    + git log --pretty=oneline      提交简介
2.回退版本提交
    + git reset --hard HEAD         回退到当前最新提交
    + git reset --hard HEAD^        回退到上次提交
    + git reset --hard HEAD~n       回退到上n次提交
    + git reset --hard commitid     回退到某次提交
3.重返未来版本
    + git reflog    查看历史提交以及被回退的提交（该记录有时限，且只在本地）
    + git reset --herd commitid     回到未来版本
4.撤销修改
    + 文件去撤销文件（没有提交到暂存区/没有git add）撤销修改    git checkout [文件名]
    + 暂存区撤销文件
        -将暂存区文件撤销到工作区   git reset HEAD 文件不带--hard
        -撤销修改                   git checkout [文件名]
5.删除文件
    + 从版本库中删除文件（修改后需要提交）  git rm [文件名]
    + 恢复删除      参考撤销修改
    + 从版本库中删除文件，本地不删除        git rm --cached [文件名]</code></pre><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><p>创建和合并分支</p>
<pre><code>1.创建分支
    - 仅创建        git branch [分支名]
    - 创建并切换    git checkout -b [分支名]
2.切换分支          git checkout [分支名]
3.合并分支
        - 合并某分支到当前分支       git merge
        - git rebase   无特殊需求不建议使用
4.删除分支
    - 删除本地未合并分支    git branch -D
    - 删除温蒂已合并分支    git branch -d
    - 删除远程分支          git push origin -d
                            git push [远程仓库名] -d [分支名]
5.查看分支
    - 查看当前分支          git branch
    - 查看所有分支信息      git branch -a
6.合并分支，解决分支冲突
    - 将要合并的分支更新到最新
    - 切换到主分支
    - 合并分支
    - 解决合并时的conflict
    - 提交到版本库
    - 合并成功
    - 查看分支状态  git log --graph
                    git log --graph --pretty=oneline --abbrey-commit
7.开发完成需要提交PR/MR</code></pre><p>暂存修改</p>
<pre><code>1.暂存工作现场      git stash
2.恢复工作现场
    - 恢复          git stash apply
    - 删除          git stash drop
    - 恢复+删除     git stash pop</code></pre><p>多人协作</p>
<pre><code>1.查看远程库信息
    - 详细      git remote -v
    - 不详细    git remote
2.更新推出远程库
    - 更新远程库信息                git fetch
    - 将远程库最新更新到本地库       git pull
    - 将本地修改推送到远程库         git push
                                   git push origin [分支名]
3.本地分支与远程分支交互
    - 使用远程分支A创建本地分支     git checkout -b origin/A
    - 将本地分支与远程分支关联      git branch --set-upstream A origin/A</code></pre><h4 id="代码版本tag"><a href="#代码版本tag" class="headerlink" title="代码版本tag"></a>代码版本tag</h4><pre><code>1.查看tag
    - 本地tag       git tag
    - 远程tag       git tag -r
2.操作tag
    - 添加tag       
        + 给当前版本添加tag     git tag [标签名]
        + 给历史版本添加tag     git tag [标签名] commitid
    - 删除tag
        + 删除本地标签          git tag -d [标签名]
        + 删除远程标签          git push origin -d
    - 推送到远端仓库            git push origin [标签名]
        + 推送所有未提交tag     git push origin --tags
    - 更新到本地        git pull origin --tags
tag与branch的操作基本一致，因为tag就是一个仅可读的branch</code></pre><blockquote>
<p>可以使用 git help 查看常用的命令，使用 git help -a 可以查看所有的git命令</p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS盒子模型</title>
    <url>/2020/04/01/2020-04-01-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B-md/</url>
    <content><![CDATA[<h2 id="CSS盒子模型简介"><a href="#CSS盒子模型简介" class="headerlink" title="CSS盒子模型简介"></a>CSS盒子模型简介</h2><blockquote>
<p>当我们对文档进行布局的时候，浏览器的渲染引擎会根据<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model" target="_blank" rel="noopener"> CSS 基础框盒模型（CSS basic box model）</a>标准，将所有元素渲染成一个个矩形的盒子，且通过CSS决定盒子的大小、位置以及属性等属性。</p>
</blockquote>
<a id="more"></a>
<p><strong>每个盒子有四个部分组成</strong></p>
<ul>
<li>内容边界 Content edge</li>
<li>内边距边界 Padding Edge</li>
<li>框边界 Border Edge</li>
<li>外边框边界 Margin Edge</li>
</ul>
<p>MDN 官网图片<br><img src="https://mdn.mozillademos.org/files/8685/boxmodel-(3).png" ></p>
<h2 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h2><blockquote>
<p>CSS 中的 box-sizing 属性定义了 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/User_agent" target="_blank" rel="noopener">user agent</a> 应该如何计算一个元素的总宽度和总高度。</p>
</blockquote>
<h3 id="W3C标准盒模型（content-box）"><a href="#W3C标准盒模型（content-box）" class="headerlink" title="W3C标准盒模型（content-box）"></a>W3C标准盒模型（content-box）</h3><blockquote>
<p>默认值，标准盒子模型。 width 与 height 只包括内容的宽和高，不包括边框（border），内边距（padding），外边距（margin）。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    width:200px;</span><br><span class="line">    height:200px;</span><br><span class="line">    background-color:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://user-gold-cdn.xitu.io/2017/10/25/9cb491d4bd5d326aeb16632280411283?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" >

<h3 id="IE盒模型（border-box）"><a href="#IE盒模型（border-box）" class="headerlink" title="IE盒模型（border-box）"></a>IE盒模型（border-box）</h3><blockquote>
<p>width 和 height 属性包括内容，内边距和边框，但<strong>不包括外边距(margin)</strong>。</p>
</blockquote>
<p><strong>尺寸计算公式</strong>：</p>
<p>width = border + padding + 内容的宽度</p>
<p>height = border + padding + 内容的高度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    width:200px;</span><br><span class="line">    height:200px;</span><br><span class="line">    background-color:blue;</span><br><span class="line">    padding:20px;</span><br><span class="line">    border:10px solid orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://user-gold-cdn.xitu.io/2017/10/25/cfff88aff482f7dd89d60d7498695450?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" >

<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote>
<p>我们在编写页面代码时应尽量使用标准的W3C模型(需在页面中声明DOCTYPE类型)，这样可以避免多个浏览器对同一页面的不兼容。因为若不声明DOCTYPE类型，IE浏览器会将盒子模型解释为IE盒子模型，FireFox等会将其解释为W3C盒子模型；若在页面中声明了DOCTYPE类型，所有的浏览器都会把盒模型解释为W3C盒模型。</p>
</blockquote>
<p><strong>参考文献</strong></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model" target="_blank" rel="noopener">CSS 基础框盒模型介绍</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing" target="_blank" rel="noopener">box-sizing</a></p>
<p><a href="https://juejin.im/post/59ef72f5f265da4320026f76" target="_blank" rel="noopener">CSS盒模型详解</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery源码解读（一）</title>
    <url>/2020/02/03/2020-2-3-jQuery%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89-md/</url>
    <content><![CDATA[<h3 id="jQuery源码解读（一）"><a href="#jQuery源码解读（一）" class="headerlink" title="jQuery源码解读（一）"></a>jQuery源码解读（一）</h3><a id="more"></a>
<h4 id="JQ的基本概括"><a href="#JQ的基本概括" class="headerlink" title="JQ的基本概括"></a>JQ的基本概括</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">    &quot;use strict&quot;</span><br><span class="line">    if(typeof module === &quot;object&quot; &amp;&amp; typeof module.exports === &quot;object&quot;)&#123;</span><br><span class="line">        //......</span><br><span class="line">        //支持CommonJS模块规范的执行</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        //可以理解为浏览器环境或者（Web-view）环境</span><br><span class="line">        //浏览器环境中 global===window</span><br><span class="line">        // factory === function(window,noGlobal)&#123;&#125;</span><br><span class="line">        factory(global);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(typeof window !== &quot;undefind&quot; ? window :this, function (window,noGlobal)&#123;</span><br><span class="line">    //window === window</span><br><span class="line">    //noGlobal === undefined</span><br><span class="line">    &quot;use strict&quot;;</span><br><span class="line">    //......</span><br><span class="line">    </span><br><span class="line">    var version =  &quot;3.4.1&quot;,</span><br><span class="line">        jQuery = function (selector,context)&#123;</span><br><span class="line">            return new jQuery.fn.init(selector,context);</span><br><span class="line">        &#125;;</span><br><span class="line">    //jQuery 是一个类，jQuery是给原型设置一个别名</span><br><span class="line">    jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line">        //公共属性和方法</span><br><span class="line">        jquery: version,</span><br><span class="line">        constructor: jQuery,    //保证类的完整性</span><br><span class="line">        length:0，</span><br><span class="line">        </span><br><span class="line">        //转化为数组的方法</span><br><span class="line">        toArray: function()&#123;</span><br><span class="line">            //this ：一般指向当前类的jQuery实例</span><br><span class="line">            return slice.call(this);</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        //把JQ对象转化为原生JS对象</span><br><span class="line">        get:function(num)&#123;</span><br><span class="line">            if(num == null)&#123;</span><br><span class="line">                return slice.call(this);</span><br><span class="line">            &#125;</span><br><span class="line">            return num &lt; 0 ? this[num + this.length]: this[num];</span><br><span class="line">        &#125;,</span><br><span class="line">        //jQ中的遍历方法</span><br><span class="line">         each:function()&#123;</span><br><span class="line">            return jQuery.each(this,callback);</span><br><span class="line">        &#125;,</span><br><span class="line">        //eq方法</span><br><span class="line">        eq:function(i)&#123;</span><br><span class="line">            var len = this.length,</span><br><span class="line">                j = +i + ( i &lt; 0 ? len :0);</span><br><span class="line">                return this.pushStack( j &gt;= 0 &amp;&amp; j &lt; len ? [this[j]] ; []);</span><br><span class="line">        &#125;,</span><br><span class="line">        //......</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    //jQuery是一个普通对象</span><br><span class="line">    jQuery.ajax = function(url,options)&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;；</span><br><span class="line">    </span><br><span class="line">    if(!noGlobal)&#123;</span><br><span class="line">        //把jQuery赋值给window下的jQuery和$</span><br><span class="line">        window.jQuery = window.$ = jQuery;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="jQuery上的方法"><a href="#jQuery上的方法" class="headerlink" title="jQuery上的方法"></a>jQuery上的方法</h4><blockquote>
<p>jQuery 的方法写在了两个位置上：一个将它当成类是写在它的原型上，一个是将它当成普通对象写在它的对象上，所以调用方法也不一样。对象上用 jQuery.或者$. 就可以调用，原型上要基于实例调用。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//1.原型上 jQuery.prototype = &#123;...&#125;</span><br><span class="line">//      $().get()       只有jQuery实例才可以调用</span><br><span class="line">//2.对象上 jQuery.ajax = ...</span><br><span class="line">//      $.ajax()      直接调用</span><br><span class="line">// 所以实例不能调用ajax()方法</span><br></pre></td></tr></table></figure>

<h4 id="JQ的each方法"><a href="#JQ的each方法" class="headerlink" title="JQ的each方法"></a>JQ的each方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*JQ 中只有一个each 方法，用来遍历数组、对象、类数组的每一项</span><br><span class="line"> *  each:function()&#123;</span><br><span class="line"> *      return jQuery.each(this,callback);</span><br><span class="line"> *&#125;,</span><br><span class="line"> *</span><br><span class="line"> *  $a.each()最后还是会转化为 $.each($a) 这种模式</span><br><span class="line"> */</span><br><span class="line">$navList.each(function(index,item)&#123;</span><br><span class="line">    //...</span><br><span class="line">&#125;)</span><br><span class="line">$.each($navList,function(index,item)&#123;</span><br><span class="line">    //...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h5 id="each-源码"><a href="#each-源码" class="headerlink" title="each()源码"></a>each()源码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">each:function()&#123;</span><br><span class="line">    var length,i = 0;</span><br><span class="line">    </span><br><span class="line">    if(isArrayLike(obj))&#123;</span><br><span class="line">        length = obj.length;</span><br><span class="line">        for(;i &lt; length; i++)&#123;</span><br><span class="line">            if(callback.call(obj[i],i,obj[i] === false)&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        for(i in obj)&#123;</span><br><span class="line">            if(callback.call(obj[i],i,obj[i] === false)&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="检测当前对象是数组还是类数组的方法"><a href="#检测当前对象是数组还是类数组的方法" class="headerlink" title="检测当前对象是数组还是类数组的方法"></a>检测当前对象是数组还是类数组的方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function isArrayLike(obj)&#123;</span><br><span class="line">    var length = !!obj &amp;&amp; &quot;length&quot; in obj &amp;&amp; obj.length,</span><br><span class="line">        type = toType(obj);</span><br><span class="line">        </span><br><span class="line">    if(ifFunction(obj) || isWindow(obj))&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return type === &quot;array&quot; || length === 0 || typeof length === &quot;number&quot; &amp;&amp; length &gt; 0 &amp;&amp; (length - 1) in obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>源码</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
</search>
